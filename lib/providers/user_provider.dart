import 'package:flutter/material.dart';
import 'package:pos/configs/api_url.dart';
import 'package:pos/models/auth_model.dart';
import 'package:pos/models/user_model.dart';
import 'package:pos/utils/user_preferences.dart';
import 'package:http/http.dart' as http;

class UserProvider with ChangeNotifier {
  User _currentUser = User(
    id: 0,
    userType: '',
    surname: '',
    firstName: '',
    lastName: '',
    username: '',
    email: '',
    language: '',
    contactNo: '',
    address: '',
    businessId: 0,
    essentialsDepartmentId: '',
    essentialsDesignationId: '',
    essentialsSalary: '',
    essentialsPayPeriod: '',
    essentialsPayCycle: '',
    maxSalesDiscountPercent: '',
    allowLogin: 1,
    status: '',
    crmContactId: '',
    isCmmsnAgnt: 0,
    cmmsnPercent: '',
    selectedContacts: 0,
    dob: '',
    gender: '',
    maritalStatus: '',
    bloodGroup: '',
    contactNumber: '',
    altNumber: '',
    familyNumber: '',
    fbLink: '',
    twitterLink: '',
    socialMedia1: '',
    socialMedia2: '',
    permanentAddress: '',
    currentAddress: '',
    guardianName: '',
    customField1: '',
    customField2: '',
    customField3: '',
    customField4: '',
    bankDetails: '',
    idProofName: '',
    idProofNumber: '',
    deletedAt: '',
    createdAt: DateTime.now(),
    updatedAt: DateTime.now(),
    isAdmin: false,
    allPermissions: [],
    business: Business(
      id: 0,
      name: '',
      currencyId: 54,
      startDate: DateTime.now(),
      taxNumber1: DateTime.now(),
      taxLabel1: '',
      taxNumber2: '',
      taxLabel2: '',
      codeLabel1: '',
      code1: '',
      codeLabel2: '',
      code2: '',
      defaultSalesTax: '',
      defaultProfitPercent: 0,
      ownerId: 0,
      timeZone: '',
      fyStartMonth: 1,
      accountingMethod: '',
      defaultSalesDiscount: '',
      sellPriceTax: '',
      logo: '',
      skuPrefix: '',
      enableProductExpiry: 0,
      expiryType: '',
      onProductExpiry: '',
      stopSellingBefore: 0,
      enableTooltip: 1,
      purchaseInDiffCurrency: 0,
      purchaseCurrencyId: '',
      pExchangeRate: '',
      transactionEditDays: 30,
      stockExpiryAlertDays: 0,
      keyboardShortcuts: '',
      posSettings: '',
      weighingScaleSetting: WeighingScaleSetting(
        labelPrefix: '',
        productSkuLength: 'POS',
        qtyLength: '',
        qtyLengthDecimal: '',
      ),
      manufacturingSettings: '',
      essentialsSettings: '',
      woocommerceSkippedOrders: '',
      woocommerceWhOcSecret: '',
      woocommerceWhOuSecret: '',
      woocommerceWhOdSecret: '',
      woocommerceWhOrSecret: '',
      enableBrand: 0,
      enableCategory: 0,
      enableSubCategory: 0,
      enablePriceTax: 0,
      enablePurchaseStatus: 0,
      enableLotNumber: 0,
      defaultUnit: 0,
      enableSubUnits: 0,
      enableRacks: 0,
      enableRow: 0,
      enablePosition: 0,
      enableEditingProductFromPurchase: 0,
      salesCmsnAgnt: 0,
      itemAdditionMethod: 0,
      enableInlineTax: 0,
      currencySymbolPlacement: '',
      enabledModules: [],
      dateFormat: '',
      timeFormat: '',
      refNoPrefixes: RefNoPrefixes(
        purchase: '',
        purchaseReturn: '',
        purchaseOrder: '',
        stockTransfer: '',
        stockAdjustment: '',
        sellReturn: '',
        expense: '',
        contacts: '',
        purchasePayment: '',
        sellPayment: '',
        expensePayment: '',
        businessLocation: '',
        username: '',
        subscription: '',
        draft: '',
        salesOrder: '',
      ),
      themeColor: '',
      createdBy: '',
      enableRp: 0,
      rpName: '',
      amountForUnitRp: '',
      minOrderTotalForRp: '',
      maxRpPerOrder: 0,
      redeemAmountPerUnitRp: '',
      minOrderTotalForRedeem: '',
      minRedeemPoint: 0,
      maxRedeemPoint: 0,
      rpExpiryPeriod: 0,
      rpExpiryType: '',
      emailSettings: EmailSettings(
        mailDriver: '',
        mailHost: '',
        mailPort: '',
        mailUsername: '',
        mailPassword: '',
        mailEncryption: '',
        mailFromAddress: '',
        mailFromName: '',
      ),
      smsSettings: SmsSettings(
        smsService: '',
        nexmoKey: '',
        nexmoSecret: '',
        nexmoFrom: '',
        twilioSid: '',
        twilioToken: '',
        twilioFrom: '',
        url: '',
        sendToParamName: '',
        msgParamName: '',
        requestMethod: '',
        header1: '',
        headerVal1: '',
        header2: '',
        headerVal2: '',
        header3: '',
        headerVal3: '',
        param1: '',
        paramVal1: '',
        param2: '',
        paramVal2: '',
        param3: '',
        paramVal3: '',
        param4: '',
        paramVal4: '',
        param5: '',
        paramVal5: '',
        param6: '',
        paramVal6: '',
        param7: '',
        paramVal7: '',
        param8: '',
        paramVal8: '',
        param9: '',
        paramVal9: '',
        param10: '',
        paramVal10: '',
      ),
      customLabels: '',
      commonSettings: CommonSettings(
        defaultCreditLimit: '',
        enablePurchaseOrder: '',
        defaultDatatablePageEntries: '',
      ),
      isActive: 0,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    ),
  );

  User get currentUser => _currentUser;

  Future<void> fetchAndSetUser() async {
    Auth auth = await UserPreferences().getAuth();
    String token = auth.accessToken.toString();
    var headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': 'Bearer $token'
    };
    final url = Uri.parse(ApiUrl.currentUser);

    try {
      final response = await http.get(url, headers: headers);

      if (response.statusCode == 200) {        
        final result = userDataFromJson(response.body);
        _currentUser = result.data;
        // print('opening stock: '+ _profitLost.openingStock);
        notifyListeners();
      } else {
        // print('opening stock: GAGAL');
        notifyListeners();
      }
    } catch (error) {
      // print(error);
      rethrow;
    }
  }
} // END CLASS